

 1- MongoDB Setup
Option 1: Install MongoDB Locally
To install MongoDB Community Edition on your local machine:

Download the Installer: Visit the MongoDB Download Center and select your operating system.

Run the Installer: Follow the installation wizard steps. For Windows, detailed instructions are available here: 
mongodb.com
.

Start MongoDB: After installation, start the MongoDB server (mongod) and connect using the MongoDB shell (mongosh).

Create Database and Collection:

javascript
Copy
Edit
use plp_bookstore
db.createCollection("books")
Option 2: Set Up a Free MongoDB Atlas Cluster
Create an Account: Sign up at MongoDB Atlas.

Create a Free Cluster:

Navigate to the Clusters section.

Click Create and select the M0 free tier.

Choose your preferred cloud provider and region.

Configure Access:

IP Whitelist: Add your IP address to the access list.

Database User: Create a database user with appropriate permissions.

Connect to Cluster:

Use the connection string provided by Atlas to connect via mongosh or MongoDB Compass.

Detailed steps are available here: 
mongodb.com
.

2- Basic CRUD Operations
Insert Books
Create a JavaScript file named insert_books.js with the following content:

javascript
Copy
Edit
db.books.insertMany([
  {
    title: "The Great Gatsby",
    author: "F. Scott Fitzgerald",
    genre: "Classic",
    published_year: 1925,
    price: 10.99,
    in_stock: true,
    pages: 180,
    publisher: "Scribner"
  },
  // Add at least 9 more book documents with similar structure
]);
To execute the script:

mongosh < insert_books.js
CRUD Operations
Find all books in a specific genre:

javascript
Copy
Edit
db.books.find({ genre: "Classic" })
Find books published after a certain year:

javascript
Copy
Edit
db.books.find({ published_year: { $gt: 2000 } })
Find books by a specific author:

javascript
Copy
Edit
db.books.find({ author: "J.K. Rowling" })
Update the price of a specific book:


db.books.updateOne(
  { title: "The Great Gatsby" },
  { $set: { price: 12.99 } }
)
Delete a book by its title:

db.books.deleteOne({ title: "The Great Gatsby" })
3- Advanced Queries
Find books that are both in stock and published after 2010:

db.books.find({ in_stock: true, published_year: { $gt: 2010 } })
Use projection to return only the title, author, and price fields:


db.books.find({}, { title: 1, author: 1, price: 1, _id: 0 })
Implement sorting by price:


db.books.find().sort({ price: 1 })
Descending:

db.books.find().sort({ price: -1 })
Implement pagination (5 books per page):

Page 1:

javascript
Copy
Edit
db.books.find().limit(5)
Page 2:

javascript
Copy
Edit
db.books.find().skip(5).limit(5)
ðŸ“Š Task 4: Aggregation Pipeline
Calculate the average price of books by genre:

javascript
Copy
Edit
db.books.aggregate([
  { $group: { _id: "$genre", averagePrice: { $avg: "$price" } } }
])
Find the author with the most books in the collection:

javascript
Copy
Edit
db.books.aggregate([
  { $group: { _id: "$author", count: { $sum: 1 } } },
  { $sort: { count: -1 } },
  { $limit: 1 }
])
Group books by publication decade and count them:

javascript
Copy
Edit
db.books.aggregate([
  {
    $group: {
      _id: {
        $concat: [
          { $toString: { $multiply: [{ $floor: { $divide: ["$published_year", 10] } }, 10] } },
          "s"
        ]
      },
      count: { $sum: 1 }
    }
  }
])
4- Indexing
Create an index on the title field for faster searches:


db.books.createIndex({ title: 1 })
Create a compound index on author and published_year:


db.books.createIndex({ author: 1, published_year: -1 })
Use the explain() method to demonstrate performance improvement:


db.books.find({ title: "The Great Gatsby" }).explain("executionStats")
